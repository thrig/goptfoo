.Dd January  1 2018
.Dt GOPTFOO 3
.Os
.Sh NAME
.Nm argtod ,
.Nm argtoll ,
.Nm argtoul ,
.Nm flagtod ,
.Nm flagtoll ,
.Nm flagtoul ,
.Nm flagtolods ,
.Nm flagtololls ,
.Nm flagtolous
.Nd utility functions for option parsing
.Sh SYNOPSIS
.In goptfoo.h
.Ft double
.Fn argtod "const char *argname" "const char *arg" "const double min" "const double max"
.Ft long long
.Fn argtoll "const char *argname" "const char *arg" "const long long min" "const long long max"
.Ft unsigned long
.Fn argtoul "const char *argname" "const char *arg" "const unsigned long min" "const unsigned long max"
.Ft double
.Fn flagtod "const int flag" "const char *flagarg" "const double min" "const double max"
.Ft long long
.Fn flagtoll "const int flag" "const char *flagarg" "const long long min" "const long long max"
.Ft unsigned long
.Fn flagtoul "const int flag" "const char *flagarg" "const unsigned long min" "const unsigned long max"
.Ft size_t
.Fn flagtolods "const int flag" "const char *flagarg" "const double min" "const double max" "double **items" "size_t * numitems" "const size_t list_min" "size_t list_max"
.Ft size_t
.Fn flagtololls "const int flag" "const char *flagarg" "const long long min" "const long long max" "long long **items" "size_t * numitems" "const size_t list_min" "size_t list_max"
.Ft size_t
.Fn flagtolouls "const int flag" "const char *flagarg" "const unsigned long min" "const unsigned long max" "unsigned long **items" "size_t * numitems" "const size_t list_min" "size_t list_max"
.Sh DESCRIPTION
These functions provide means to convert command-line values into C data
types with error checking and limits to help avoid invalid input. Should
custom limits on the input not be necessary, specify appropriate minimum
and maximum values; for the integer related functions, use
.Dv ULONG_MAX
or similar from the system
.In limits.h ;
for the floating point functions, specify
.Dv INF
or
.Dv NAN
to disable the limit checks.
.Pp
The base of various conversions is set to
.Dv 0
which allows decimal, hex, or octal values to be supplied by the user.
(Since library version 5.)
.Pp
Negative values as input will result in an error from functions that
deal with unsigned integers. (This avoids the 
.Xr strtoul 3
default which instead turns very small negative numbers into very large
integers.)
.Sh RETURN VALUES
If the input cannot be parsed, or lies outside the given limits, an
error message will be printed to standard error, and the process will
exit with the
.Dv EX_DATAERR
code from
.Xr sysexits 3 .
The functions that create lists of values may also exit the process
with the
.Dv EX_OSERR
code should
.Xr realloc 3
fail. Otherwise, the return value is either the value parsed or for the
list-of-value functions the number of items parsed. This number of items
is also placed into 
.Ql numitems ,
unless the caller sets that to
.Dv NULL .
.Pp
The caller should if necessary
.Xr free 3
the 
.Ql items **
list populated by the 
.Ql flagtolo*s
functions when done with those values.
.Sh EXAMPLES
A fragment that illustrates how to parse two command line options; there
is also a longer example
.Pa goptfoo.c
present under the
.Pa demo
directory of the source distribution and perhaps also installed under the
.Pa share/doc
directory.
.Bd -literal -offset indent
\&...
#include <goptfoo.h>

#define DIST_MIN 0.1
#define DIST_MAX 2.0

#define KLING_MP 1000

double Flag_Distance;              // -d
unsigned long Flag_Klingon_Power;  // -k

int main(int argc, char *argv[])
{
    int ch;
    while ((ch = getopt(argc, argv, "d:k:...")) != -1) {
        switch (ch) {
        case 'd':
            Flag_Distance = flagtod(ch, optarg, DIST_MIN, DIST_MAX);
            break;
        case 'k':
            Flag_Klingon_Power = flagtoul(ch, optarg, 1UL, KLING_MP);
            break;
\&...
.Ed
.Pp
Note that when an
.Vt unsigned long
argument is subsequently cast to some other type, the actual maximum
could either be
.Dv ULONG_MAX
or the maximum of the other type, depending on which is smaller. One
option is to define a macro that picks the smallest (or largest for
minimums). This will help avoid integer over- or underflows and improve
portability to systems where
.Vt unsigned long
and
.Vt size_t
may differ.
.Bd -literal -offset indent
#define MAXMEM ( (ULONG_MAX < SIZE_MAX) ? ULONG_MAX : SIZE_MAX )
\&...
            Flag_Memsize = flagtoul(ch, optarg, 1UL, MAXMEM);
\&...
    calloc((size_t)Flag_Memsize, sizeof(...
.Ed
.Pp
If this library has been installed to a non-default location, use
.Pa pkg-config
to obtain the necessary details for compilation. A 
.Pa Makefile
might use something along the lines of:
.Bd -literal -offset indent
foo: foo.c
    $(CC) $(CFLAGS) `pkg-config --cflags --libs goptfoo` foo.c -o foo.o
.Ed
.Sh SEE ALSO
.Xr getopt 3 ,
.Xr pkg-config 1 ,
.Xr strtod 3 ,
.Xr strtoll 3 ,
.Xr strtonum 3 ,
.Xr strtoul 3 ,
.Xr sysexits 3
.Sh AUTHOR
.An Jeremy Mates
.Sh CAVEATS
This software uses
.In math.h ;
if used in a program that names a variable
.Va sin
(commonly of
.Vt struct sockaddr_in
type) then there may be compiler warnings and possibly other issues
stemming from the thus shadowed global declaration of
.Fn sin .
.Sh SECURITY CONSIDERATIONS
This code has not much been scrutinized for problems. It should be
before being used in any environment with malicious users or untrusted
input. In particular, the
.Ql flagtolo*s
functions are complicated and thus more likely to contain bugs than the
single-value returning functions. Where possible, set appropriate limits.
In particular, the
.Ql list_max
variable should be no larger than necessary.
